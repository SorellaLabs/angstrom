--- crates/types/src/matching/composite.rs
+++ replace CompositeOrder<'a>::negative_quantity -> u128 with 1
@@ -111,23 +111,17 @@
     }
 
     /// Specifically in the case that we are buying T0, there's a "negative
     /// quantity" - the amount of T0 that is required to be provided from an
     /// external source as the T0 provided by the debt decreases with a price
     /// motion.  If an AMM is moving along with the debt, we can see if it
     /// provides an amount of T0 that offsets the debt's negative quantity.
     pub fn negative_quantity(&self, external_bound: Ray) -> u128 {
-        let target_price = self.find_closest_bound(external_bound);
-        let (amm_q, debt_q) = self.calc_quantities(target_price);
-        if let Some(Direction::BuyingT0) = self.debt_direction(target_price) {
-            debt_q.saturating_sub(amm_q)
-        } else {
-            0
-        }
+        1 /* ~ changed by cargo-mutants ~ */
     }
 
     pub fn negative_quantity_t1(&self, external_bound: Ray) -> u128 {
         // cur_q - amm contribution * external_bound.inverse_quantity
         if let Some(d) = self.debt {
             let target_price = self.find_closest_bound(external_bound);
             let (amm_q, _) = self.calc_quantities(target_price);
             if let Some(Direction::BuyingT0) = self.debt_direction(target_price) {
