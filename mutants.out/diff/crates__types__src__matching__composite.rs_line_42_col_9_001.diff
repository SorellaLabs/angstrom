--- crates/types/src/matching/composite.rs
+++ replace CompositeOrder<'a>::bound -> Option<Ray> with Some(Default::default())
@@ -34,17 +34,17 @@
         self.debt.is_some()
     }
 
     pub fn amm(&self) -> Option<&PoolPrice<'a>> {
         self.amm.as_ref()
     }
 
     pub fn bound(&self) -> Option<Ray> {
-        self.bound_price
+        Some(Default::default()) /* ~ changed by cargo-mutants ~ */
     }
 
     pub fn calc_quantities(&self, target_price: Ray) -> (u128, u128) {
         debug!(target_price = ?target_price, "Calculating quantities to target price");
         let amm_q = self
             .amm
             .as_ref()
             .map(|a| a.vec_to(target_price.into()).unwrap().d_t0)
