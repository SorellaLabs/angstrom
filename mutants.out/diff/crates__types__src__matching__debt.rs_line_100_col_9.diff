--- crates/types/src/matching/debt.rs
+++ replace <impl Add for DebtType>::add -> Self::Output with Default::default()
@@ -92,26 +92,17 @@
         }
     }
 }
 
 impl Add for DebtType {
     type Output = Self;
 
     fn add(self, rhs: Self) -> Self::Output {
-        match (self, rhs) {
-            // Like types accumulate
-            (Self::ExactIn(q_1), Self::ExactIn(q_2)) => Self::ExactIn(q_1 + q_2),
-            (Self::ExactOut(q_1), Self::ExactOut(q_2)) => Self::ExactOut(q_1 + q_2),
-            // Different types annihilate or maybe flip
-            (Self::ExactIn(q_1), Self::ExactOut(q_2)) if q_2 > q_1 => Self::ExactOut(q_2 - q_1),
-            (Self::ExactIn(q_1), Self::ExactOut(q_2)) => Self::ExactIn(q_1 - q_2),
-            (Self::ExactOut(q_1), Self::ExactIn(q_2)) if q_2 > q_1 => Self::ExactIn(q_2 - q_1),
-            (Self::ExactOut(q_1), Self::ExactIn(q_2)) => Self::ExactOut(q_1 - q_2)
-        }
+        Default::default() /* ~ changed by cargo-mutants ~ */
     }
 }
 
 impl Sub<u128> for DebtType {
     type Output = Self;
 
     fn sub(self, rhs: u128) -> Self::Output {
         match self {
