--- crates/types/src/matching/debt.rs
+++ replace - with / in <impl Add for DebtType>::add
@@ -100,17 +100,17 @@
         match (self, rhs) {
             // Like types accumulate
             (Self::ExactIn(q_1), Self::ExactIn(q_2)) => Self::ExactIn(q_1 + q_2),
             (Self::ExactOut(q_1), Self::ExactOut(q_2)) => Self::ExactOut(q_1 + q_2),
             // Different types annihilate or maybe flip
             (Self::ExactIn(q_1), Self::ExactOut(q_2)) if q_2 > q_1 => Self::ExactOut(q_2 - q_1),
             (Self::ExactIn(q_1), Self::ExactOut(q_2)) => Self::ExactIn(q_1 - q_2),
             (Self::ExactOut(q_1), Self::ExactIn(q_2)) if q_2 > q_1 => Self::ExactIn(q_2 - q_1),
-            (Self::ExactOut(q_1), Self::ExactIn(q_2)) => Self::ExactOut(q_1 - q_2)
+            (Self::ExactOut(q_1), Self::ExactIn(q_2)) => Self::ExactOut(q_1 / /* ~ changed by cargo-mutants ~ */ q_2)
         }
     }
 }
 
 impl Sub<u128> for DebtType {
     type Output = Self;
 
     fn sub(self, rhs: u128) -> Self::Output {
