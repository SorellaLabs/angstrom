--- crates/types/src/matching/debt.rs
+++ replace + with - in Debt::price_range
@@ -175,17 +175,17 @@
         self.magnitude.slack_at_price(self.cur_price)
     }
 
     /// Given the Debt's direction and rounding, return the low and high price
     /// that will result in an exchange for an identical amount of T0
     pub fn price_range(&self) -> (Ray, Ray) {
         let current_amount = self.current_t0();
         let bound_amount = match self.magnitude {
-            DebtType::ExactIn(_) => current_amount + 1,
+            DebtType::ExactIn(_) => current_amount - /* ~ changed by cargo-mutants ~ */ 1,
             DebtType::ExactOut(_) => current_amount.saturating_sub(1)
         };
         debug!(current_amount, bound_amount, "Getting price range between targets");
         let (current_price, bound_price) = match (current_amount, bound_amount) {
             // If both values are zero, something is hecka wrong
             (0, 0) => (Ray::min_uniswap_price(), Ray::max_uniswap_price()),
             // If either value is 0, one of our bounds is max price
             (0, p) | (p, 0) => (
