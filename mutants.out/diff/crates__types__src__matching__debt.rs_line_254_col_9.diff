--- crates/types/src/matching/debt.rs
+++ replace Debt::freed_t1 -> u128 with 1
@@ -246,29 +246,17 @@
         i_t0.saturating_sub(f_t0)
     }
 
     /// Returns the amount of T1 that needs to be reallocated for a given change
     /// in a debt's T0 value
     pub fn freed_t1(&self, t0_change: u128) -> u128 {
         // The amount of T1 we can free from this is equal to the quantity of T1 used at
         // this price plus our slack
-        if t0_change >= self.current_t0() {
-            self.magnitude()
-        } else {
-            let discriminant = if self.bid_side() { 1_u128 } else { 0_u128 };
-            let target_amount = t0_change.saturating_add(discriminant);
-            let round_up = self.bid_side();
-            std::cmp::min(
-                self.magnitude(),
-                self.price()
-                    .quantity(target_amount, round_up)
-                    .saturating_sub(discriminant)
-            )
-        }
+        1 /* ~ changed by cargo-mutants ~ */
     }
 
     /// Create a new Debt object based on the price change created by filling
     /// the debt with a specified amount of t0
     pub fn partial_fill(&self, q: u128) -> Self {
         // P' = P + (y/q) = self.cur_price + Ray::calc_price(y, q)
         let (new_t0, current_t1) = match self.magnitude {
             DebtType::ExactIn(m) => {
