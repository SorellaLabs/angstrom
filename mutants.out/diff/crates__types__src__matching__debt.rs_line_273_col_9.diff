--- crates/types/src/matching/debt.rs
+++ replace Debt::partial_fill -> Self with Default::default()
@@ -265,28 +265,17 @@
             )
         }
     }
 
     /// Create a new Debt object based on the price change created by filling
     /// the debt with a specified amount of t0
     pub fn partial_fill(&self, q: u128) -> Self {
         // P' = P + (y/q) = self.cur_price + Ray::calc_price(y, q)
-        let (new_t0, current_t1) = match self.magnitude {
-            DebtType::ExactIn(m) => {
-                let t0 = self.current_t0() + q;
-                (t0, m)
-            }
-            DebtType::ExactOut(m) => {
-                let t0 = self.current_t0().saturating_sub(q);
-                (t0, m)
-            }
-        };
-        let new_price = Ray::calc_price_generic(new_t0, current_t1, self.magnitude.round_up());
-        Self { magnitude: self.magnitude, cur_price: new_price }
+        Default::default() /* ~ changed by cargo-mutants ~ */
     }
 
     /// Create a new Debt object based on the price change created by filling
     /// the debt with a specified amount of T1
     pub fn partial_fill_t1(&self, q: u128) -> Self {
         let current_t0 = self.current_t0();
         let new_t1 = self.magnitude - q;
         let new_price =
