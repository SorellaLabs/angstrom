--- crates/types/src/matching/debt.rs
+++ replace Debt::partial_fill_t1 -> Self with Default::default()
@@ -282,21 +282,17 @@
         };
         let new_price = Ray::calc_price_generic(new_t0, current_t1, self.magnitude.round_up());
         Self { magnitude: self.magnitude, cur_price: new_price }
     }
 
     /// Create a new Debt object based on the price change created by filling
     /// the debt with a specified amount of T1
     pub fn partial_fill_t1(&self, q: u128) -> Self {
-        let current_t0 = self.current_t0();
-        let new_t1 = self.magnitude - q;
-        let new_price =
-            Ray::calc_price_generic(current_t0, new_t1.magnitude(), self.magnitude.round_up());
-        Self { magnitude: new_t1, cur_price: new_price }
+        Default::default() /* ~ changed by cargo-mutants ~ */
     }
 
     /// Create a new debt object which just has our T1 reduced by the specified
     /// amount, the intention being that the T0 previously allocated has been
     /// elsewise pushed to a paired AMM in a Composite order
     pub fn flat_fill_t1(&self, q: u128) -> Self {
         let new_t1 = self.magnitude - q;
         Self { magnitude: new_t1, cur_price: self.cur_price }
