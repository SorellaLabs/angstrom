--- crates/types/src/matching/debt.rs
+++ replace DebtType::t0_at_price -> u128 with 1
@@ -59,22 +59,17 @@
 
     pub fn is_empty(&self) -> bool {
         self.magnitude() == 0
     }
 
     pub fn t0_at_price<T: Into<Ray>>(&self, price: T) -> u128 {
         // If it's an ExactIn debt our output is rounded down, otherwise it's ExactOut
         // and the input is rounded up
-        let round_up = match self {
-            Self::ExactIn(_) => false,
-            Self::ExactOut(_) => true
-        };
-        let ray_price: Ray = price.into();
-        ray_price.inverse_quantity(self.magnitude(), round_up)
+        1 /* ~ changed by cargo-mutants ~ */
     }
 
     pub fn slack_at_price<T: Into<Ray>>(&self, price: T) -> u128 {
         let ray_price: Ray = price.into();
         // If I'm on the Ask side (ExactOut debt) I need to substract 1 from my slack
         let ask_side = match self {
             Self::ExactIn(_) => 0,
             Self::ExactOut(_) => 1
