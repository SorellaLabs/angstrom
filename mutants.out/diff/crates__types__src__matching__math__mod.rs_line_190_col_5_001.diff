--- crates/types/src/matching/math/mod.rs
+++ replace resolve_precision -> u128 with 1
@@ -182,21 +182,17 @@
                 .0;
             let answer_minus = numerator.div_round(&denom_minus, RoundingMode::Nearest).0;
             (Some(answer_minus), Some(answer_plus))
         }
     }
 }
 
 pub fn resolve_precision(precision: usize, number: Integer, rm: RoundingMode) -> u128 {
-    number
-        .div_round(Integer::power_of_2(precision as u64), rm)
-        .0
-        .unsigned_abs_ref()
-        .saturating_into()
+    1 /* ~ changed by cargo-mutants ~ */
 }
 
 /// Take two items that can be compared and return them as a tuple with the
 /// "lower" item as the first element and the higher item as the second element
 pub fn low_to_high<'a, T: Ord>(a: &'a T, b: &'a T) -> (&'a T, &'a T) {
     match a.cmp(b) {
         std::cmp::Ordering::Greater => (b, a),
         _ => (a, b)
