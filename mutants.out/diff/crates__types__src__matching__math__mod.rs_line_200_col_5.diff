--- crates/types/src/matching/math/mod.rs
+++ replace low_to_high -> (&'a T, &'a T) with (&Default::default(), &Default::default())
@@ -192,20 +192,17 @@
         .0
         .unsigned_abs_ref()
         .saturating_into()
 }
 
 /// Take two items that can be compared and return them as a tuple with the
 /// "lower" item as the first element and the higher item as the second element
 pub fn low_to_high<'a, T: Ord>(a: &'a T, b: &'a T) -> (&'a T, &'a T) {
-    match a.cmp(b) {
-        std::cmp::Ordering::Greater => (b, a),
-        _ => (a, b)
-    }
+    (&Default::default(), &Default::default()) /* ~ changed by cargo-mutants ~ */
 }
 
 pub fn max_t1_for_t0(t0: u128, direction: Direction, price: Ray) -> u128 {
     match direction {
         // If we're buying we always round down so it's the amount it'd take to buy (t0 + 1) - 1
         Direction::BuyingT0 => price.quantity(t0 + 1, true).saturating_sub(1),
         // If we're selling, we always round up, so the max for a quantity is just what's at the
         // quantity
