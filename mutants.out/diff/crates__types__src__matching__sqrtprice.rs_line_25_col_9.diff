--- crates/types/src/matching/sqrtprice.rs
+++ replace SqrtPriceX96::as_f64 -> f64 with -1.0
@@ -17,22 +17,17 @@
 pub struct SqrtPriceX96(U160);
 
 impl SqrtPriceX96 {
     /// Uses malachite.rs to approximate this value as a floating point number.
     /// Converts from the internal U160 representation of `sqrt(P)` to an
     /// approximated f64 representation of `P`, which is a change to the
     /// value of this number and why this isn't `From<SqrtPriceX96> for f64`
     pub fn as_f64(&self) -> f64 {
-        let numerator = Natural::from_limbs_asc(self.0.as_limbs());
-        let denominator: Natural = Natural::power_of_2(96u64);
-        let sqrt_price = Rational::from_naturals(numerator, denominator);
-        let price = sqrt_price.pow(2u64);
-        let (res, _) = price.rounding_into(malachite::rounding_modes::RoundingMode::Floor);
-        res
+        -1.0 /* ~ changed by cargo-mutants ~ */
     }
 
     /// Convert a floating point price `P` into a SqrtPriceX96 `sqrt(P)`
     pub fn from_float_price(price: f64) -> Self {
         SqrtPriceX96(U160::from(price.sqrt() * (2.0_f64.pow(96))))
     }
 
     /// Produces the SqrtPriceX96 precisely at a given tick
