--- crates/types/src/matching/sqrtprice.rs
+++ replace SqrtPriceX96::at_tick -> eyre::Result<Self> with Ok(Default::default())
@@ -32,17 +32,17 @@
 
     /// Convert a floating point price `P` into a SqrtPriceX96 `sqrt(P)`
     pub fn from_float_price(price: f64) -> Self {
         SqrtPriceX96(U160::from(price.sqrt() * (2.0_f64.pow(96))))
     }
 
     /// Produces the SqrtPriceX96 precisely at a given tick
     pub fn at_tick(tick: i32) -> eyre::Result<Self> {
-        Ok(Self::from(get_sqrt_ratio_at_tick(tick)?))
+        Ok(Default::default()) /* ~ changed by cargo-mutants ~ */
     }
 
     /// Produces the maximum SqrtPriceX96 valid for a given tick before we step
     /// forward into the next tick
     pub fn max_at_tick(tick: i32) -> eyre::Result<Self> {
         Ok(Self::from(get_sqrt_ratio_at_tick(tick + 1)?.saturating_sub(U256::from(1))))
     }
 
