--- crates/types/src/matching/uniswap/flags.rs
+++ replace <impl From for U160>::from -> U160 with Default::default()
@@ -54,33 +54,17 @@
 impl UniswapFlags {
     pub fn mask() -> U160 {
         (U160::from(1_u8) << 14) - U160::from(1_u8)
     }
 }
 
 impl From<UniswapFlags> for U160 {
     fn from(value: UniswapFlags) -> U160 {
-        let bitshift: usize = match value {
-            UniswapFlags::BeforeInitialize => 13,
-            UniswapFlags::AfterInitialize => 12,
-            UniswapFlags::BeforeAddLiquidity => 11,
-            UniswapFlags::AfterAddLiquidity => 10,
-            UniswapFlags::BeforeRemoveLiquidity => 9,
-            UniswapFlags::AfterRemoveLiquidity => 8,
-            UniswapFlags::BeforeSwap => 7,
-            UniswapFlags::AfterSwap => 6,
-            UniswapFlags::BeforeDonate => 5,
-            UniswapFlags::AfterDonate => 4,
-            UniswapFlags::BeforeSwapReturnsDelta => 3,
-            UniswapFlags::AfterSwapReturnsDelta => 2,
-            UniswapFlags::AfterAddLiquidityReturnsDelta => 1,
-            UniswapFlags::AfterRemoveLiquidityReturnsDelta => 0
-        };
-        U160::from(1_u8) << bitshift
+        Default::default() /* ~ changed by cargo-mutants ~ */
     }
 }
 
 impl BitOr for UniswapFlags {
     type Output = U160;
 
     fn bitor(self, rhs: Self) -> Self::Output {
         Into::<U160>::into(self) | Into::<U160>::into(rhs)
