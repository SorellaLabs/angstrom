--- crates/types/src/matching/uniswap/liqrange.rs
+++ replace LiqRangeRef<'a>::next -> Option<Self> with Some(Default::default())
@@ -120,20 +120,17 @@
 
     /// Returns the appropriate tick to donate to in order to reward LPs in this
     /// position
     pub fn donate_tick(&self) -> Tick {
         self.lower_tick
     }
 
     pub fn next(&self, direction: Direction) -> Option<Self> {
-        match direction {
-            Direction::BuyingT0 => self.pool_snap.get_range_for_tick(self.range.upper_tick),
-            Direction::SellingT0 => self.pool_snap.get_range_for_tick(self.range.lower_tick - 1)
-        }
+        Some(Default::default()) /* ~ changed by cargo-mutants ~ */
     }
 }
 
 impl<'a> Debug for LiqRangeRef<'a> {
     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
         let mut builder = f.debug_struct("LiqRangeRef");
         builder.field("range", &self.range);
         builder.field("range_idx", &self.range_idx);
