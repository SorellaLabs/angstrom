--- crates/types/src/matching/uniswap/poolprice.rs
+++ replace < with == in PoolPrice<'a>::intersect_with_debt
@@ -206,17 +206,17 @@
             self.price,
             debt.magnitude(),
             debt.price(),
             Direction::BuyingT0
         );
         debug!(solve = ?solve, "Solve");
         let step = resolve_precision(192, solve, RoundingMode::Floor);
         debug!(step, "Step");
-        if step < t0_to_upper {
+        if step == /* ~ changed by cargo-mutants ~ */ t0_to_upper {
             return Ok(step)
         }
         let new_debt = debt.partial_fill(step);
         // If our next range is in another liquidity pool
         let recurse = if next_range_start.liq_range.lower_tick != self.liq_range.lower_tick {
             next_range_start.intersect_with_debt(new_debt)?
         } else {
             0
