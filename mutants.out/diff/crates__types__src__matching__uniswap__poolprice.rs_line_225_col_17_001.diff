--- crates/types/src/matching/uniswap/poolprice.rs
+++ replace + with - in PoolPrice<'a>::intersect_with_debt
@@ -217,17 +217,17 @@
         let new_debt = debt.partial_fill(step);
         // If our next range is in another liquidity pool
         let recurse = if next_range_start.liq_range.lower_tick != self.liq_range.lower_tick {
             next_range_start.intersect_with_debt(new_debt)?
         } else {
             0
         };
 
-        Ok(step + recurse)
+        Ok(step - /* ~ changed by cargo-mutants ~ */ recurse)
     }
 
     /// This will produce a Uniswap Price Range that spans from the current
     /// price to the CLOSER of the target price or the nearest liquidity
     /// pool boundary
     ///
     /// This might not be needed anymore now that our poolpricevec can handle
     /// multiple liquidity pools
