--- crates/types/src/matching/uniswap/poolprice.rs
+++ replace == with != in PoolPrice<'a>::d_t0
@@ -81,17 +81,17 @@
     pub fn liquidity(&self) -> u128 {
         self.liq_range.liquidity
     }
 
     /// Presuming a transaction in T0, return a new PoolPrice.  We error
     /// if we're not able to move enough in the direction we want to.
     pub fn d_t0(&self, quantity: u128, direction: Direction) -> eyre::Result<Self> {
         // We can short-circuit for a transaction of zero
-        if quantity == 0 {
+        if quantity != /* ~ changed by cargo-mutants ~ */ 0 {
             return Ok(self.clone())
         }
         // Otherwise let's calculate
         let mut sqrt_ratio_current_x_96 = self.price.into();
         debug!(current_price = ?sqrt_ratio_current_x_96, "Current price");
         let mut active_liq_range: Option<LiqRangeRef<'a>> = None;
         let mut cur_quantity = U256::from(quantity);
         while cur_quantity > U256::ZERO {
