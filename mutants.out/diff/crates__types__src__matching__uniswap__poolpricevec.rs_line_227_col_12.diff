--- crates/types/src/matching/uniswap/poolpricevec.rs
+++ delete ! in PoolPriceVec<'a>::from_price_range
@@ -219,17 +219,17 @@
     pub fn steps(&self) -> Option<&Vec<SwapStep>> {
         self.steps.as_ref()
     }
 
     /// Create a new PoolPriceVec from a start and end price with full safety
     /// checks and with the ability to span liquidity boundaries.
     pub fn from_price_range(start: PoolPrice<'a>, end: PoolPrice<'a>) -> eyre::Result<Self> {
         // If the two prices aren't from the same pool, we should error
-        if !std::ptr::eq(start.liq_range.pool_snap, end.liq_range.pool_snap) {
+        if  /* ~ changed by cargo-mutants ~ */std::ptr::eq(start.liq_range.pool_snap, end.liq_range.pool_snap) {
             return Err(eyre!("Cannot create a price range from prices not in the same pool"));
         }
 
         let steps: Vec<SwapStep> = start
             .liq_range
             .pool_snap
             .ranges_for_ticks(start.tick, end.tick)?
             .iter()
