--- crates/types/src/matching/uniswap/poolpricevec.rs
+++ replace PoolPriceVec<'a>::delta_to_price -> (u128, u128) with (0, 0)
@@ -475,23 +475,17 @@
 
     /// A very raw delta to a specific price presuming the liquidity is constant
     /// for the duration of the swap
     fn delta_to_price(
         start_price: SqrtPriceX96,
         end_price: SqrtPriceX96,
         liquidity: u128
     ) -> (u128, u128) {
-        let sqrt_ratio_a_x_96 = start_price.into();
-        let sqrt_ratio_b_x_96 = end_price.into();
-        let d_t0 = _get_amount_0_delta(sqrt_ratio_a_x_96, sqrt_ratio_b_x_96, liquidity, false)
-            .unwrap_or(Uint::from(0));
-        let d_t1 = _get_amount_1_delta(sqrt_ratio_a_x_96, sqrt_ratio_b_x_96, liquidity, false)
-            .unwrap_or(Uint::from(0));
-        (d_t0.to(), d_t1.to())
+        (0, 0) /* ~ changed by cargo-mutants ~ */
     }
 
     pub fn is_buy(&self) -> bool {
         self.start_bound.price < self.end_bound.price
     }
 
     /// Returns `(d_t0, d_t1, price)`
     pub fn quantity(&self, target_price: OrderPrice) -> (u128, u128, OrderPrice) {
