--- crates/types/src/matching/uniswap/poolpricevec.rs
+++ replace SwapStep<'a>::from_prices -> eyre::Result<Self> with Ok(Default::default())
@@ -90,23 +90,17 @@
         let start = range.start_price(direction);
         let end = range.end_price(direction);
         Self::from_prices(start, end)
     }
 
     /// Creates a SwapStep that covers the range between two prices, provided
     /// those prices are both within the same liquidity range
     pub fn from_prices(start: PoolPrice<'a>, end: PoolPrice<'a>) -> eyre::Result<Self> {
-        if start.liq_range != end.liq_range {
-            return Err(eyre!(
-                "A SwapStep can only cover one liquidity range, provided prices are from \
-                 different ranges"
-            ));
-        }
-        Self::compute_info(start.price, end.price, start.liq_range)
+        Ok(Default::default()) /* ~ changed by cargo-mutants ~ */
     }
 
     /// Internal method for computing swap step details
     fn compute_info(
         start_price: SqrtPriceX96,
         end_price: SqrtPriceX96,
         liq_range: LiqRangeRef<'a>
     ) -> eyre::Result<Self> {
