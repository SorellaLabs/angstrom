--- crates/types/src/matching/uniswap/poolsnapshot.rs
+++ replace PoolSnapshot::current_price -> PoolPrice with Default::default()
@@ -95,22 +95,17 @@
     }
 
     /// Return a read-only iterator over the liquidity ranges in this snapshot
     pub fn ranges(&self) -> Iter<LiqRange> {
         self.ranges.iter()
     }
 
     pub fn current_price(&self) -> PoolPrice {
-        let range = self
-            .ranges
-            .get(self.cur_tick_idx)
-            .map(|range| LiqRangeRef { pool_snap: self, range, range_idx: self.cur_tick_idx })
-            .unwrap();
-        PoolPrice { liq_range: range, tick: self.current_tick, price: self.sqrt_price_x96 }
+        Default::default() /* ~ changed by cargo-mutants ~ */
     }
 
     pub fn at_price(&self, price: SqrtPriceX96) -> eyre::Result<PoolPrice> {
         let tick = price.to_tick()?;
         let range = self
             .get_range_for_tick(tick)
             .ok_or_eyre("Unable to find tick range for price")?;
         Ok(PoolPrice { liq_range: range, tick, price })
