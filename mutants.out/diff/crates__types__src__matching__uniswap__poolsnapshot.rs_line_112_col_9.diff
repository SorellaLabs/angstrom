--- crates/types/src/matching/uniswap/poolsnapshot.rs
+++ replace PoolSnapshot::at_price -> eyre::Result<PoolPrice> with Ok(Default::default())
@@ -104,21 +104,17 @@
             .ranges
             .get(self.cur_tick_idx)
             .map(|range| LiqRangeRef { pool_snap: self, range, range_idx: self.cur_tick_idx })
             .unwrap();
         PoolPrice { liq_range: range, tick: self.current_tick, price: self.sqrt_price_x96 }
     }
 
     pub fn at_price(&self, price: SqrtPriceX96) -> eyre::Result<PoolPrice> {
-        let tick = price.to_tick()?;
-        let range = self
-            .get_range_for_tick(tick)
-            .ok_or_eyre("Unable to find tick range for price")?;
-        Ok(PoolPrice { liq_range: range, tick, price })
+        Ok(Default::default()) /* ~ changed by cargo-mutants ~ */
     }
 
     pub fn at_tick(&self, tick: i32) -> eyre::Result<PoolPrice> {
         let price = SqrtPriceX96::at_tick(tick)?;
         let range = self
             .get_range_for_tick(tick)
             .ok_or_eyre("Unable to find tick range for price")?;
         Ok(PoolPrice { liq_range: range, tick, price })
