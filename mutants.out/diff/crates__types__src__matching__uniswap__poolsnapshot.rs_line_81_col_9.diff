--- crates/types/src/matching/uniswap/poolsnapshot.rs
+++ replace PoolSnapshot::ranges_for_ticks -> eyre::Result<Vec<LiqRangeRef>> with Ok(vec![])
@@ -73,30 +73,17 @@
 
     /// Returns a list of references to all liquidity ranges including and
     /// between the given Ticks.  These ranges will be continuous in order.
     pub fn ranges_for_ticks(
         &self,
         start_tick: Tick,
         end_tick: Tick
     ) -> eyre::Result<Vec<LiqRangeRef>> {
-        let (low, high) = low_to_high(&start_tick, &end_tick);
-        let output = self
-            .ranges
-            .iter()
-            .enumerate()
-            .filter_map(|(range_idx, range)| {
-                if range.upper_tick > *low && range.lower_tick <= *high {
-                    Some(LiqRangeRef { pool_snap: self, range, range_idx })
-                } else {
-                    None
-                }
-            })
-            .collect();
-        Ok(output)
+        Ok(vec![]) /* ~ changed by cargo-mutants ~ */
     }
 
     /// Return a read-only iterator over the liquidity ranges in this snapshot
     pub fn ranges(&self) -> Iter<LiqRange> {
         self.ranges.iter()
     }
 
     pub fn current_price(&self) -> PoolPrice {
